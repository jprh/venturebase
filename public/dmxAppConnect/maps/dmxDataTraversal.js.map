{"version":3,"sources":["version.js","components/dataView.js","components/dataDetail.js","components/dataIterator.js"],"names":["dmx","versions","Component","initialData","data","page","pages","items","sort","on","dir","has","first","prev","next","last","attributes","type","Array","Object","default","filter","String","Number","pagesize","sorton","sortdir","validate","val","test","methods","select","this","setPage","prop","props","toLowerCase","_update","render","node","filtered","$parse","performUpdate","updatedProps","destroyFilter","effect","parse","setData","item","DataScope","rev","a","b","set","length","pageSize","Math","ceil","repeatItems","map","clone","$value","$index","$key","size","offset","slice","beforeDestroy","key","value","update","fields","isArray","hasOwnProperty","push","reset","index","findIndex","$node","requestAnimationFrame","forms","querySelectorAll","i","loop","Boolean","random","console","warn","floor","parseInt"],"mappings":"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","file":"../dmxDataTraversal/dmxDataTraversal.js","sourcesContent":["dmx.versions['dmxDataTraversal'] = '2.0.0-beta.2';","dmx.Component('data-view', {\r\n\r\n    initialData: {\r\n        data: [],\r\n        page: 1,\r\n        pages: 1,\r\n        items: 0,\r\n        sort: {\r\n            on: '',\r\n            dir: 'asc'\r\n        },\r\n        has: {\r\n            first: false,\r\n            prev: false,\r\n            next: false,\r\n            last: false\r\n        }\r\n    },\r\n\r\n    attributes: {\r\n        data: {\r\n            type: [Array, Object],\r\n            default: null\r\n        },\r\n\r\n        filter: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n\r\n        page: {\r\n            type: Number,\r\n            default: 1\r\n        },\r\n\r\n        pagesize: {\r\n            type: Number,\r\n            default: 0\r\n        },\r\n\r\n        sorton: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n\r\n        sortdir: {\r\n            type: String,\r\n            default: 'asc',\r\n            validate: function(val) {\r\n                return /^(asc|desc)$/i.test(val);\r\n            }\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        select: function(page) {\r\n            this.setPage(Number(page));\r\n        },\r\n\r\n        first: function() {\r\n            this.setPage(1);\r\n        },\r\n\r\n        prev: function() {\r\n            var page = this.data.page - 1;\r\n            if (page < 1) page = 1;\r\n            if (page > this.data.pages) page = this.data.pages;\r\n            this.setPage(page);\r\n        },\r\n\r\n        next: function() {\r\n            var page = this.data.page + 1;\r\n            if (page < 1) page = 1;\r\n            if (page > this.data.pages) page = this.data.pages;\r\n            this.setPage(page);\r\n        },\r\n\r\n        last: function() {\r\n            var page = this.data.pages;\r\n            this.setPage(page);\r\n        },\r\n\r\n        sort: function(prop, dir) {\r\n            this.props.sorton = prop;\r\n            this.props.sortdir = (dir && dir.toLowerCase() == 'desc' ? 'desc' : 'asc');\r\n            this._update();\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        this.items = [];\r\n        this.filtered = [];\r\n        this.$parse();\r\n    },\r\n\r\n    performUpdate: function(updatedProps) {\r\n        if (updatedProps.has('filter')) {\r\n            if (this.props.filter) {\r\n                this.destroyFilter = dmx.effect(() => {\r\n                    // we call parse to listen for changes\r\n                    dmx.parse(this.props.filter, this);\r\n                    this._update();\r\n                });\r\n            } else if (this.destroyFilter) {\r\n                // cleanup\r\n                this.destroyFilter();\r\n                delete this.destroyFilter;\r\n            }\r\n        }\r\n\r\n        if (updatedProps.has('data')) {\r\n            this.setData(this.props.data);\r\n        }\r\n\r\n        if (updatedProps.has('page')) {\r\n            this.setPage(this.props.page);\r\n        }\r\n\r\n        this._update();\r\n    },\r\n\r\n    _update: function() {\r\n        this.filtered = this.items.filter(item => {\r\n            if (!this.props.filter) return true;\r\n            return dmx.parse(this.props.filter, dmx.DataScope(item, this));\r\n        });\r\n\r\n        if (this.props.sorton) {\r\n            let on = this.props.sorton;\r\n            let dir = this.props.sortdir.toLowerCase()\r\n            let rev = dir == 'desc';\r\n            \r\n            this.filtered.sort((a, b) => {\r\n                if (rev) {\r\n                    return a[on] > b[on] ? -1 : a[on] < b[on] ? 1 : 0;\r\n                } else {\r\n                    return a[on] < b[on] ? -1 : a[on] > b[on] ? 1 : 0;\r\n                }\r\n            });\r\n            \r\n            this.set('sort', { on, dir });\r\n        }\r\n\r\n        if (this.filtered.length) {\r\n            let pageSize = this.props.pagesize;\r\n\r\n            this.set('pages', pageSize ? Math.ceil(this.filtered.length / pageSize) : 1);\r\n        } else {\r\n            this.set('pages', 1);\r\n        }\r\n\r\n        this.set('items', this.filtered.length);\r\n\r\n        this.setPage(this.data.page);\r\n    },\r\n\r\n    setData: function(data) {\r\n        this.items = dmx.repeatItems(data).map(item => {\r\n            item = dmx.clone(item);\r\n            delete item.$value;\r\n            delete item.$index;\r\n            delete item.$key;\r\n            return item;\r\n        });\r\n    },\r\n\r\n    setPage: function(page) {\r\n        const size = +this.props.pagesize;\r\n        const pages = this.data.pages;\r\n\r\n        page = page < 1 ? 1 : page > pages ? pages : page;\r\n\r\n        const offset = (page - 1) * size;\r\n\r\n        this.set('page', page);\r\n        this.set('data', size ? this.filtered.slice(offset, offset + size) : this.filtered);\r\n        this.set('has', {\r\n            first: page > 1,\r\n            prev: page > 1,\r\n            next: page < pages,\r\n            last: page < pages\r\n        });\r\n    },\r\n\r\n    beforeDestroy: function() {\r\n        if (this.destroyFilter) {\r\n            this.destroyFilter();\r\n            delete this.destroyFilter;\r\n        }\r\n    }\r\n});\r\n","dmx.Component('data-detail', {\r\n\r\n    initialData: {\r\n        data: {}\r\n    },\r\n\r\n    attributes: {\r\n        data: {\r\n            type: Array,\r\n            default: []\r\n        },\r\n\r\n        key: {\r\n            type: String\r\n        },\r\n\r\n        value: {\r\n            type: [String, Number]\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        select: function(value) {\r\n            this.props.value = value;\r\n            this.select(value, true);\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        this.items = [];\r\n        this.setData(this.props.data);\r\n        this.select(this.props.value);\r\n        this.$parse();\r\n    },\r\n\r\n    update: function(props, fields) {\r\n        if (fields.has('data')) {\r\n            this.setData(this.props.data);\r\n            this.select(this.props.value);\r\n        } else if (props.value !== this.props.value) {\r\n            this.select(this.props.value, true);\r\n        }\r\n    },\r\n\r\n    setData: function(data) {\r\n        this.items = [];\r\n\r\n        if (data && typeof data == 'object') {\r\n            if (Array.isArray(data)) {\r\n                this.items = data.map(function(item) {\r\n                    return (typeof item === 'object') ? item : { $value: item };\r\n                });\r\n            } else {\r\n                for (var key in data) {\r\n                    if (!data.hasOwnProperty(key)) continue;\r\n                    this.items.push({ $key: key, $value: data[key] });\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    select: function(value, reset) {\r\n        var index = this.items.findIndex(function(item) {\r\n            return item[this.props.key] === value;\r\n        }, this);\r\n\r\n        this.set('data', this.items[index] || null);\r\n\r\n        if (reset) {\r\n            var node = this.$node;\r\n\r\n            requestAnimationFrame(function() {\r\n                var forms = node.querySelectorAll('form');\r\n\r\n                for (var i = 0; i < forms.length; i++) {\r\n                    forms[i].reset();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n});\r\n","dmx.Component('data-iterator', {\r\n\r\n    initialData: {\r\n        index: -1,\r\n        value: null,\r\n        has: {\r\n            first: false,\r\n            prev: false,\r\n            next: false,\r\n            last: false\r\n        }\r\n    },\r\n\r\n    attributes: {\r\n        data: {\r\n            type: Array,\r\n            default: []\r\n        },\r\n\r\n        index: {\r\n            type: Number,\r\n            default: 0\r\n        },\r\n\r\n        loop: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        first: function() {\r\n            this.first();\r\n        },\r\n\r\n        prev: function() {\r\n            this.prev();\r\n        },\r\n\r\n        next: function() {\r\n            this.next();\r\n        },\r\n\r\n        last: function() {\r\n            this.last();\r\n        },\r\n\r\n        random: function() {\r\n            this.random();\r\n        },\r\n\r\n        select: function(index) {\r\n            this.select(index);\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        this.items = [];\r\n        this.setData(this.props.data);\r\n        this.select(this.props.index);\r\n        this.$parse();\r\n    },\r\n\r\n    update: function(props, fields) {\r\n        if (fields.has('data')) {\r\n            this.setData(this.props.data);\r\n            this.select(this.props.index);\r\n        } else if (props.index !== this.props.index) {\r\n            this.select(this.props.index);\r\n        }\r\n    },\r\n\r\n    setData: function(data) {\r\n        if (data) {\r\n            if (Array.isArray(data)) {\r\n                this.items = data;\r\n            } else {\r\n                console.warn('Iterator data is not array but a ' + (typeof data));\r\n            }\r\n        }\r\n    },\r\n\r\n    first: function() {\r\n        if (this.items.length) {\r\n            this.select(0);\r\n        }\r\n    },\r\n\r\n    prev: function() {\r\n        if (this.items.length) {\r\n            index = this.data.index - 1;\r\n            if (index < 0 && this.props.loop) {\r\n                index = this.items.length - 1;\r\n            }\r\n            this.select(index);\r\n        }\r\n    },\r\n\r\n    next: function() {\r\n        if (this.items.length) {\r\n            index = this.data.index + 1;\r\n            if (index >= this.items.length && this.props.loop) {\r\n                index = 0;\r\n            }\r\n            this.select(index);\r\n        }\r\n    },\r\n\r\n    last: function() {\r\n        if (this.items.length) {\r\n            this.select(this.items.length - 1);\r\n        }\r\n    },\r\n\r\n    random: function() {\r\n        if (this.items.length) {\r\n            this.select(Math.floor(this.items.length * Math.random()));\r\n        }\r\n    },\r\n\r\n    select: function(index) {\r\n        index = parseInt(index, 10);\r\n\r\n        if (this.items.length) {\r\n            var last = this.items.length - 1;\r\n            if (index < 0) index = 0;\r\n            if (index >= this.items.length) index = last;\r\n            this.set('index', index);\r\n            this.set('value', this.items[index]);\r\n            this.set('has', {\r\n                first: index > 0,\r\n                prev: index > 0,\r\n                next: index < last,\r\n                last: index < last\r\n            });\r\n        } else {\r\n            this.set('index', -1);\r\n            this.set('value', null);\r\n            this.set('has', {\r\n                first: false,\r\n                prev: false,\r\n                next: false,\r\n                last: false\r\n            });\r\n        }\r\n    }\r\n\r\n});\r\n"]}