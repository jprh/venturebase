{"version":3,"sources":["components/masonry.js"],"names":["dmx","Component","extends","attributes","breakpoints","type","Object","default","sm","md","lg","xl","xxl","columns","Number","columnsSm","columnsMd","columnsLg","columnsXl","columnsXll","gutter","gutterSm","gutterMd","gutterLg","gutterXl","gutterXll","preserveOrder","Boolean","animated","animationDuration","methods","reflow","this","_reflow","init","node","prototype","call","debounce","bind","_resizeObserver","ResizeObserver","observe","render","style","setProperty","performUpdate","updatedProps","has","children","length","$node","querySelectorAll","forEach","img","dmxMasonry","addEventListener","once","src","props","keys","breakpoint","window","innerWidth","suffix","toUpperCase","slice","nodes","Array","from","getComputedStyle","padding","parseInt","paddingLeft","paddingRight","columnWidth","Math","floor","clientWidth","dispatchEvent","Event","columnHeights","fill","nodesHeights","map","clientHeight","index","i","indexOf","min","apply","x","y","dmxMasonryInit","requestAnimationFrame","max"],"mappings":"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","file":"../dmxMasonry/dmxMasonry.js","sourcesContent":["dmx.Component('masonry', {\r\n\r\n  extends: 'repeat',\r\n\r\n  attributes: {\r\n    breakpoints: {\r\n      type: Object,\r\n      default: { sm: 480, md: 768, lg: 992, xl: 1200, xxl: 1400 },\r\n    },\r\n\r\n    columns: {\r\n      type: Number,\r\n      default: 4,\r\n    },\r\n\r\n    columnsSm: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    columnsMd: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    columnsLg: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    columnsXl: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    columnsXll: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    gutter: {\r\n      type: Number,\r\n      default: 15,\r\n    },\r\n\r\n    gutterSm: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    gutterMd: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    gutterLg: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    gutterXl: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    gutterXll: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    preserveOrder: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    animated: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    animationDuration: {\r\n      type: Number,\r\n      default: 400,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    reflow () {\r\n      this._reflow();\r\n    },\r\n  },\r\n\r\n  init (node) {\r\n    dmx.Component('repeat').prototype.init.call(this, node);\r\n\r\n    this._reflow = dmx.debounce(this._reflow.bind(this));\r\n    this._resizeObserver = new ResizeObserver(this._reflow);\r\n    this._resizeObserver.observe(node);\r\n  },\r\n\r\n  render (node) {\r\n    node.style.setProperty('position', 'relative');\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('repeat') || updatedProps.has('key')) {\r\n      dmx.Component('repeat').prototype.performUpdate.call(this, updatedProps);\r\n    }\r\n\r\n    this._reflow();\r\n  },\r\n\r\n  _reflow () {\r\n    if (!this.children.length) return;\r\n\r\n    this.$node.querySelectorAll('img').forEach(img => {\r\n      if (!img.dmxMasonry) {\r\n        img.addEventListener('load', this._reflow, { once: true });\r\n        if (img.src) img.src = img.src;\r\n        img.dmxMasonry = true;\r\n      }\r\n    });\r\n\r\n    let { breakpoints, columns, gutter } = this.props;\r\n\r\n    Object.keys(breakpoints).forEach(breakpoint => {\r\n      if (window.innerWidth >= breakpoints[breakpoint]) {\r\n        const suffix = breakpoint[0].toUpperCase() + breakpoint.slice(1);\r\n        columns = this.props['columns' + suffix] || columns;\r\n        gutter = this.props['gutter' + suffix] || gutter;\r\n      }\r\n    });\r\n\r\n    const nodes = Array.from(this.$node.children);\r\n    const style = window.getComputedStyle(this.$node);\r\n    const padding = {\r\n      left: parseInt(style.paddingLeft) || 0,\r\n      right: parseInt(style.paddingRight) || 0,\r\n    };\r\n    const columnWidth = Math.floor((this.$node.clientWidth - padding.left - padding.right - ((columns - 1) * gutter)) / columns);\r\n\r\n    for (const node of nodes) {\r\n      node.style.setProperty('box-sizing', 'border-box');\r\n      node.style.setProperty('width', columnWidth + 'px');\r\n    }\r\n\r\n    // dispatch resize event for components that still listen to that for updating\r\n    window.dispatchEvent(new Event('resize'));\r\n\r\n    const columnHeights = Array(columns).fill(0);\r\n    const nodesHeights = nodes.map(node => node.clientHeight);\r\n\r\n    nodes.forEach((node, index) => {\r\n      const i = this.props.preserveOrder ? index % columns : columnHeights.indexOf(Math.min.apply(Math, columnHeights));\r\n      const x = (i * columnWidth) + (i * gutter);\r\n      const y = columnHeights[i];\r\n\r\n      node.style.setProperty('transform', `translate3d(${x}px, ${y}px, 0px)`);\r\n\r\n      if (nodesHeights[index]) {\r\n        if (!node.dmxMasonryInit) {\r\n          node.style.setProperty('position', 'absolute');\r\n\r\n          if (this.props.animated) {\r\n            node.style.setProperty('transition', `transform ${this.props.animationDuration}ms`);\r\n          }\r\n\r\n          requestAnimationFrame(() => node.style.setProperty('visibility', 'visible'));\r\n\r\n          node.dmxMasonryInit = true;\r\n        }\r\n\r\n        columnHeights[i] += nodesHeights[index] + gutter;\r\n      }\r\n    });\r\n\r\n    this.$node.style.setProperty('height', (Math.max.apply(Math, columnHeights) - gutter) + 'px');\r\n  },\r\n\r\n});\r\n"]}